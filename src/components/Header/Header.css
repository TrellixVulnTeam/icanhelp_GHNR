.header {
  height: 95vh; /*means at any point the height of this element occupies 95% of the viewport/"window" */
  background-image: linear-gradient(
      to right bottom,
      rgba(57, 198, 66, 0.671),
      rgba(8, 84, 41, 0.596)
    ),
    url(./hero2.jpg);
  /*to style a background-gradient we use the background-image property, we declare the gradient before declaring the background image*/
  background-size: cover;
  /*this ensures that the image fits the entire width of the box/element */
  background-position: top;
  position: relative;
  /*this ensures that no matter how wide the screen is, the top of the image will always appear on top, cropped for other sides*/
  clip-path: polygon(0 0, 100% 0, 100% 80vh, 0 100%);
  /*we specify the polygon in which the image or the element will be visible */
}

.logo-box {
  position: absolute;
  top: 40px;
  left: 40px;
  width: 85px;
  height: 85px;
  border-radius: 50%;
  background-image: url(logo2.png);
  background-size: cover;
}


.text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  /*better practice is to center elements using absolute position rather than margin 0 auto*/
  /*x,y : -50% is no in relation to the element itself not to its parent, so we are shifting it on x -50% of the width of the element to left, y-50% of the height of the element to the top */
  text-align: center;
}
.heading-primary {
  color: #fff;
  text-transform: uppercase;
  backface-visibility: hidden;
  /*when children elements are animated, this casues this"parent" element to judder/shake, we set backface-visibility to avoid this side effect
  this property determines if the back part of an animated element "its parent" should be visible opr hidden.
  */
  margin-bottom: 60px;
}
.heading-primary-main {
  display: block;
  font-size: 70px;
  font-weight: 400;
  letter-spacing: 20px;
  /*for animation to work we have to declare at least two properties, animation-name and animation duration*/
  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out;
  /*
  optional properties: 
  animation-timing-function: ease-out;
  >> describes the animation behaviour during its run, built in functions , more commonly used

  animation-delay:3s;
  >> starts the animation after assigned seconds on page reload
  
  animation-iteration-count:3
  >> declares how many times we wish the animation to iterate/repeat
  */
}
.heading-primary-sub {
  display: block;
  font-size: 25px;
  font-weight: 700;
  letter-spacing: 15px;
  /*here we use the shorthand property to declare the animation properties*/
  animation: moveInRight 1s ease-out;
}
/*we can do animation using either: 
1. Transition property 
2. @keyframes > advanced/modern CSS
*by convention we are supposed to animate only opacity & transform, the browsers are optimized for mainly these two properties.
*/
@keyframes moveInLeft {
  0% {
    opacity: 0; /*this makes element invisible at start of animation*/
    transform: translateX(
      -100px
    ); /*this to let the element start more on the left than on the beginning, to have fade in effect*/
  }

  80% {
    transform: translateX(10px);
  }
  100% {
    opacity: 1; /*this makes element visible at end of animation*/
    transform: translate(0); /*this resets the element to its origina position*/
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0; /*this makes element invisible at start of animation*/
    transform: translateX(
      100px
    ); /*this to let the element start more on the left than on the beginning, to have fade in effect*/
  }
  80% {
    transform: translateX(-10px);
  }
  100% {
    opacity: 1; /*this makes element visible at end of animation*/
    transform: translate(0); /*this resets the element to its origina position*/
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0; /*this makes element invisible at start of animation*/
    transform: translateY(
      30px
    ); /*this to let the element start more on the left than on the beginning, to have fade in effect*/
  }

  100% {
    opacity: 1; 
    transform: translate(0); 
  }
}
.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  color: inherit;
  padding: 15px 40px; 
  letter-spacing: 5px;
  display: inline-block;
  border-radius: 100px;
  transition: all 0.2s;
  font-weight: 700;
  position: relative;
}
.btn:hover,
.logo-box:hover {
  transform: translateY(-3px);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);

}
.btn:active,
.logo-box:active {
  transform: translateY(-1px);
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
}
.btn-white {
  background-color: #fff;
  color: inherit;
}

.btn::after, .logo-box::after {
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 100px;
  position: absolute;
  top: 0;
  left: 0;
  /*we set the .btn initial state to position relative so we can move the after button behind it, with top 0 left 0*/
  z-index: -1;
  transition: all 0.4s;
}

.btn-white::after{
  background-color: #fff;
}
.btn:hover::after {
  /*sets the element's style after it was hovered on */
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0; /*lets the element appears as fading out/invesible */
}

.btn-animated {
  animation: moveInBottom 0.5s ease-out 0.75s; /*0.75 is the animation delay value*/
  animation-fill-mode: backwards;
  /*this will apply the animation at 0% before it starts, we set it to opactiy 0 so it is invesible*/
}
